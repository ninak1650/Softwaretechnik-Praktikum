stages:
  - test
  - build
  - tag
  - deploy

variables:
  BACKEND_IMAGE_NAME: backend:$CI_COMMIT_SHA
  FRONTEND_IMAGE_NAME: frontend:$CI_COMMIT_SHA

test-backend:
  stage: test
  variables:
    MAVEN_OPTS: >-
      -Dhttps.protocols=TLSv1.2
      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
      -Dorg.slf4j.simpleLogger.showDateTime=true
      -Djava.awt.headless=true
    MAVEN_CLI_OPTS: >-
      --batch-mode
      --errors
      --fail-at-end
      --show-version
      --no-transfer-progress
  image: maven:3.9.9-eclipse-temurin-21
  cache:
    paths:
      - .m2/repository
  before_script:
    - useradd nonroot -d /home/nonroot -m -s /bin/bash
    - chmod -R 777 $CI_PROJECT_DIR
  script:
    - cd backend
    - su nonroot -c "mvn $MAVEN_CLI_OPTS clean org.jacoco:jacoco-maven-plugin:prepare-agent verify jacoco:report"
    - cat target/site/jacoco/index.html
  coverage: "/Total.*?([0-9]{1,3})%/"
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: jacoco
        path: backend/target/site/jacoco/jacoco.xml
      junit:
        - backend/target/surefire-reports/TEST-*.xml

test-frontend:
  stage: test
  image: node:22
  cache:
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - npm install
    - npm run test:coverage
  coverage: "/All files.*?([0-9]{1,3})/"
  artifacts:
    when: always
    reports:
      junit: frontend/coverage/junit.xml

build-backend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "backend"
      --dockerfile "backend/Dockerfile"
      --destination "$CI_REGISTRY_USER/$BACKEND_IMAGE_NAME"

build-frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "frontend"
      --dockerfile "frontend/Dockerfile"
      --destination "$CI_REGISTRY_USER/$FRONTEND_IMAGE_NAME"

tag-latest:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  stage: tag
  before_script:
    - echo $CI_REGISTRY_PASSWORD | crane auth login docker.io --username $CI_REGISTRY_USER --password-stdin
  script:
    - crane tag $CI_REGISTRY_USER/$BACKEND_IMAGE_NAME latest
    - crane tag $CI_REGISTRY_USER/$FRONTEND_IMAGE_NAME latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

tag-version:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  stage: tag
  before_script:
    - echo $CI_REGISTRY_PASSWORD | crane auth login docker.io --username $CI_REGISTRY_USER --password-stdin
  script:
    - crane tag $CI_REGISTRY_USER/$BACKEND_IMAGE_NAME $CI_COMMIT_TAG
    - crane tag $CI_REGISTRY_USER/$FRONTEND_IMAGE_NAME $CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG

deploy:
  image: kroniak/ssh-client
  stage: deploy
  before_script:
    - mkdir -p ~/.ssh
    - echo "$VM_SSH_KEY" | base64 -d >> ~/.ssh/id_rsa
    - echo $VM_SSH_FINGERPRINT >> ~/.ssh/known_hosts
    - chmod 400 ~/.ssh/id_rsa
  script:
    - ssh -o StrictHostKeyChecking=no "${VM_SSH_USER}@${VM_HOST}" "docker compose down"
    - scp -o StrictHostKeyChecking=no docker-compose.yaml "${VM_SSH_USER}@${VM_HOST}:/home/swtp"
    - scp -o StrictHostKeyChecking=no Caddyfile "${VM_SSH_USER}@${VM_HOST}:/home/swtp"
    - ssh -o StrictHostKeyChecking=no "${VM_SSH_USER}@${VM_HOST}" "docker compose pull; docker compose up -d"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
